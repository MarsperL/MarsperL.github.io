import{_ as h,M as i,c as p,o as k,j as a,p as e,ao as n,a as r,az as d,aA as E,aB as o,aC as c,aD as g,aE as y}from"./chunks/framework.BK4bk63M.js";const D=JSON.parse('{"title":"在Github上使用OsmosFeed搭建在线RSS阅读器（无需服务器）","description":"","frontmatter":{"permalink":"/butterfly/c140b7","categories":{"categories":["butterfly"]},"title":"在Github上使用OsmosFeed搭建在线RSS阅读器（无需服务器）","date":"2024-08-27T14:43:31.000Z","updated":"2024-08-30T23:28:25.000Z"},"headers":[],"relativePath":"butterfly/11.在Github上使用OsmosFeed搭建在线RSS阅读器（无需服务器）.md","filePath":"butterfly/11.在Github上使用OsmosFeed搭建在线RSS阅读器（无需服务器）.md","lastUpdated":1760877556000}'),m={name:"butterfly/11.在Github上使用OsmosFeed搭建在线RSS阅读器（无需服务器）.md"};function u(_,s,b,F,S,A){const t=i("ArticleMetadata"),l=i("Linkcard");return k(),p("div",null,[s[0]||(s[0]=a("h1",{id:"无需服务器搭建在线rss阅读器",tabindex:"-1"},[r("无需服务器搭建在线RSS阅读器 "),a("a",{class:"header-anchor",href:"#无需服务器搭建在线rss阅读器","aria-label":"Permalink to “无需服务器搭建在线RSS阅读器”"},"​")],-1)),e(t),s[1]||(s[1]=n('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to “前言”">​</a></h2><p>在搭建<code>云野阁</code>博客网站期间，看了好多具有个人特色的博客网站，有不少都有RSS订阅功能，那RSS是什么呢？咱们先唠唠。</p><details class="details custom-block"><summary>🔜RSS🔚</summary><p>RSS 全称 Really Simple Syndication（真正简易联合），是一种基于XML（可扩展标记语言）的内容分发协议，它允许用户订阅网站的内容更新，如新闻、博客文章等。好像还有另外的说法是Rich Site Summary（网站内容摘要）和 RDF Site Summary（资源描述框架站点摘要），不过其实都描述的是从订阅源获取更新的内容，并将获取的内容整合集中显示，方便用户进行查看。</p><p>网上有关RSS的相关介绍有很多，感兴趣的话可以搜索了解下。</p></details><p>订阅了RSS，只要再结合RSS阅读器，就可以直接看到有关博客的最新文章，那我们就重点搞RSS阅读器。RSS阅读器无论是自建还是使用现成的，都有很多类型，像浏览器插件、手机端、电脑端程序、web端等。搭建一个web端，方便、省事、对终端依赖小。</p><p><a href="https://github.com/osmoscraft/osmosfeed" target="_blank" rel="noreferrer">OsmosFeed</a>是GitHub上一个开源的Web版RSS阅读器，可以使用 GitHub Pages托管，利用GitHub Actions实现内容定期自动更新，主题可自定义。</p><p>本站的<code>文界</code>就是使用OsmosFeed搭建并托管在GitHub Pages上的。</p>',6)),e(l,{url:"/yygrss/index.html",title:"文界",description:"点我跳转查看",logo:"https://yyg.js.cool/img/icon.png"}),s[2]||(s[2]=n('<h2 id="搭建过程" tabindex="-1">搭建过程 <a class="header-anchor" href="#搭建过程" aria-label="Permalink to “搭建过程”">​</a></h2><h3 id="创建仓库" tabindex="-1">创建仓库 <a class="header-anchor" href="#创建仓库" aria-label="Permalink to “创建仓库”">​</a></h3><p>1.访问OsmosFeed仓库的<a href="https://github.com/osmoscraft/osmosfeed/blob/master/README_zh.md" target="_blank" rel="noreferrer">配置教程</a>，点击教程中”创建新仓库“中的第一步”使用osmosfeed-template官方模板创建仓库“，页面跳转至创建新仓库界面，设置仓库名并将可见性设为Public，点击创建Create repository按钮新建仓库。</p><p><img src="'+d+`" alt="image-20240826224400783"></p><p>2.进入刚创建好的仓库，进入目录<code>.github/workflows</code>,修改<code>update-feed.yaml</code>文件为以下内容。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build site on schedule or main branch update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Adjust refresh schedule here. By default, it runs once per day.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Syntax reference: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#schedule</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Recommended tool: https://crontab.guru/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0 11 * * *&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #设置的执行时间周期</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Node.js environment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v4.0.3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build the feed</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy to GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">peaceiris/actions-gh-pages@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          github_token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.action_token }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #action_token为设置的Actions secrets ，后面会讲到</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          publish_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./public</span></span></code></pre></div><p>3.进入刚创建好的仓库，修改根目录下的osmosfeed.yaml文件，将<code>cacheUrl:</code>行前的<code>#</code>去除，并将<code>GITHUB_USERNAME</code>修改为自己的github名称，<code>REPO_NAME</code>修改为本仓库的名。<code>sources</code>下的<code>- href:</code>为RSS/Atom源。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cacheUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://GITHUB_USERNAME.github.io/REPO_NAME/cache.json</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://css-tricks.com/feed/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://www.freecodecamp.org/news/rss/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://daverupert.com/atom.xml</span></span></code></pre></div><h3 id="设置身份验证令牌" tabindex="-1">设置身份验证令牌 <a class="header-anchor" href="#设置身份验证令牌" aria-label="Permalink to “设置身份验证令牌”">​</a></h3><p>1.点击自己的头像，选择 “Settings” -&gt; “Developer settings” -&gt; “Personal access tokens”-&gt;”Tokens（classic）“，点击 “Generate new token”，选择”Generate new token（classic）“，验证后，指定一个描述性名称，选择令牌的有效时间，选择要授予此令牌的范围或权限。只需要选择repo一项即可。点击”Generate token“，完成创建。</p><p><img src="`+E+'" alt="image-20240826230331732"></p><p>2.创建完成后，复制保存token，后面要用。</p><p>3.进入刚创建好的仓库，进入仓库的“Settings” -&gt; “Secrets and variables” -&gt; “Actions”。点击”Repository secrets“中的“New repository secret”，输入Actions secrets 的名字为action_token（与update-feed.yaml文件中的保持一致），并将第2步复制的token粘贴至Secrets框中，点击”Add secret“保存。</p><p><img src="'+o+'" alt="image-20240826231333139"></p><h3 id="部署github-pages" tabindex="-1">部署GitHub Pages <a class="header-anchor" href="#部署github-pages" aria-label="Permalink to “部署GitHub Pages”">​</a></h3><p>1.进入仓库的“Settings” -&gt; “Pages” ，在Branch中选择”gh-pages“，目录选择”/(root)“，点击”save“保存。</p><p><img src="'+c+'" alt="image-20240826232546187"></p><p><img src="'+g+'" alt="image-20240826232701080"></p><ol start="2"><li>刷新页面，直到界面上出现 <code>Your site is published at https://github用户名.github.io/仓库名</code>的确认信息（最多等待1－3分钟）即可离开。完成部署。部署的详细过程可以进入仓库的”Actions&quot;，进行查看具体过程与异常情况。</li></ol><p><img src="'+y+'" alt="image-20240826235331777"></p>',20))])}const C=h(m,[["render",u]]);export{D as __pageData,C as default};
